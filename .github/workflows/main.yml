name: Flask CI/CD

on:
  push:
    branches:
      - main

env:
  AWS_REGION: 'eu-north-1'
  GKE_CLUSTER: 'henhat-cluster'
  GKE_REGION: 'us-central1-c'
  PROJECT_ID: 'planar-sunrise-393211'

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Login to Dockerhub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN }}

      - name: versioning
        run: |
          pip install docker;
          python3 ./version-maker.py
        id: version

      - name: Build & Push
        uses: docker/build-push-action@v2
        with:
          file: ./Dockerfile
          push: true
          tags: henhat583/flask-app:latest

  flask-testing:
    needs:
      - build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Pull Docker image
        run: docker pull henhat583/flask-app:latest

      - name: Run Flask container
        run: docker run -d -p 5000:5000 --name test henhat583/flask-app:latest

      - name: Wait for Flask to start
        run: sleep 5

      - name: Check Flask logs
        run: docker logs test

      - name: Test Flask with cURL
        run: curl -X GET http://localhost:5000

  deploy-to-gke:
    needs:
      - build-and-push
      - flask-testing
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure Docker
        run: |
          gcloud auth configure-docker

      - name: Setup GCloud CLI
        uses: google-github-actions/auth@v1
        with:
          project_id: ${{ env.PROJECT_ID }}
          credentials_json: ${{ secrets.GCLOUD_PRIVATE_KEY }}

      - name: Retrieve cluster info for use with kubectl
        uses: google-github-actions/get-gke-credentials@v1
        with:
          cluster_name: ${{ env.GKE_CLUSTER }}
          location: ${{ env.GKE_REGION }}

      - name: Deploy to GKE
        run: |
          cd flask-app-chart
          helm upgrade --install henflask . -f values.yaml

      - name: Rollout Deployment
        run: kubectl rollout restart deployment flask-app

      - name: Check Available StorageClasses
        run: kubectl get storageclasses

      - name: Check if Namespace Exists
        run: |
          if kubectl get namespace grafana > /dev/null 2>&1; then
            echo "Namespace 'grafana' already exists."
          else
            kubectl create namespace grafana
          fi

      - name: Apply Namespace
        run: kubectl apply -f deploy/grafana-setup/namespace.yaml

      - name: Deploy Grafana
        run: kubectl apply -f deploy/grafana-setup

      - name: Display IP
        id: display_ip
        run: echo $(kubectl describe service flask-lb | grep Ingress | tr -d '/[a-zA-Z:]/g' | xargs);

  push-flask-to-prod:
    runs-on: ubuntu-latest
    needs:
      - build-and-push
      - flask-testing
    steps:
      - name: Configure AWS Credentials For GitHub Actions
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Write PEM file
        uses: frdrwrt/write-to-file@v1.3
        with:
          filepath: hen.pem
          content: ${{ secrets.AWS_SSH }}
          mode: 744

      - name: Check if EC2 Instance Exists and Create If Not
        id: ec2-instance-check
        run: |
          INSTANCE_ID=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=prod-server" \
            --query "Reservations[*].Instances[*].InstanceId" \
            --output text)
          if [ -z "$INSTANCE_ID" ]; then
            echo "Creating new EC2 instance named prod-server..."
            INSTANCE_ID=$(aws ec2 run-instances \
              --image-id ami-0f02b758bbecc1990 \ # Replace with your AMI ID
              --instance-type t2.micro \
              --tag-specifications "ResourceType=instance,Tags=[{Key=Name,Value=prod-server}]" \
              --key-name your-key-pair-name \ # Replace with your key pair name
              --query 'Instances[0].InstanceId' \
              --output text)
            if [ $? -ne 0 ]; then
              echo "Failed to create EC2 instance."
              exit 1
            fi
          fi
          echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV
        shell: bash

      - name: Start Prod Instance and Get IP
        id: prod-instance-ip
        run: |
          aws ec2 start-instances --instance-ids $INSTANCE_ID;
          aws ec2 wait instance-running --instance-ids $INSTANCE_ID;
          prodInstanceIP=$(aws ec2 describe-instances --instance-ids $INSTANCE_ID --query 'Reservations[].Instances[].PublicIpAddress' --output text);
          echo "::set-output name=ip::$prodInstanceIP";

      - name: Pull Docker Image on EC2
        run: |
          echo "Pulling Docker image on EC2 prod server..."
          sudo ssh -i hen.pem -o StrictHostKeyChecking=no ec2-user@${{ steps.prod-instance-ip.outputs.ip }} "docker pull henhat583/flask-app:latest"

      - name: Run Flask App on EC2 prod server
        run: |
          echo "Running Flask app on EC2 prod server..."
          sudo ssh -i hen.pem -o StrictHostKeyChecking=no ec2-user@${{ steps.prod-instance-ip.outputs.ip }} "sudo docker rm -f prod || true"
          sudo ssh -i hen.pem -o StrictHostKeyChecking=no ec2-user@${{ steps.prod-instance-ip.outputs.ip }} "sudo docker run -d -p 5000:5000 --name prod henhat583/flask-app:latest"

      - name: Display URL
        run: |
          echo "The site is http://${{ steps.prod-instance-ip.outputs.ip }}:5000"
